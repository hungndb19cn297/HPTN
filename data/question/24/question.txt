{"content":"<p>Phuongne, Th3 07, 2021</p><hr /><h2 id=\"unitylg\">Unity là gì?</h2><p>Unity3D là một hệ thống phát triển game đa nền tảng nổi tiếng nhất hiện nay. Nó bao gồm công cụ phát triển game (game engine) và tích hợp môi trường phát triển (IDE).</p><p>Game engine này có thể phát triển game ở các nền tảng như PCs, consoles, android, ios thậm chí có thể deploy cho web,…</p><p><img src=\"https://images.viblo.asia/d292e7ca-d128-4a55-b05b-f24398a581d2.png\" alt=\"image.png\" /></p><p>Ở trong bài này, chúng ta sẽ nói tới các thành phần cơ bản của Unity. Đây là một hệ thống thức tạp, mình không nói quá nhiều tính năng của nó, bạn có thể lên trang <a href=\"https://learn.unity.com/\">Unity Learn</a> để học thêm nhé.</p><h2 id=\"cckhinimcbntrongunity\">Các khái niệm cơ bản trong Unity</h2><p>Đây là các cấu trúc nền tảng làm nên Unity, các khái niệm này cũng có thể áp dụng cho hầu hết các game engies khác phổ biến hiện nay.</p><p>Với mỗi hệ thống đều có các thành phần nhỏ tạo nên nó mà chúng ta sẽ học ở các bài sau.</p><h3 id=\"1project\">1. Project</h3><p>Khái niệm Project bao trùm toàn bộ các thành phần làm nên một game: các models, assets, scripts, scenes,…. Projects được cấu trúc phân tầng tương tự với cấu trúc file và folder trong máy bạn.</p><p><img src=\"https://images.viblo.asia/9ff33a9e-576c-46bf-b6f2-a9bdb271e1fe.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Project Folder Tree&lt;/div&gt;</p><h3 id=\"2scenes\">2. Scenes</h3><p>Một scene chứa các vật thể trong game (game objects) tương tác với thế giới, trong đó có player của chúng ta.</p><p>Một game có thể chứa nhiều scenes như ở hình trên, ví dụ như bạn có game đi cảnh nhiều màn, mỗi màn chơi sẽ được lưu ở một scene khác nhau.</p><p><img src=\"https://images.viblo.asia/c2d308d6-82cd-4536-9217-326b6356552b.png\" alt=\"image.png\" /></p><h3 id=\"3packages\">3. Packages</h3><p>Một package là tập hợp các game objects, assets và các file meta-data liên quan. Bạn có thể nghĩ package tương tự như một một package thư viện trong Java vậy.</p><p>Chúng là các object liên quan với nhau: models, scripts, materials, etc,…:</p><ul><li>Một tập các shaders để hỗ trợ hiệu ứng hình ảnh.</li><li>Các prefabs hiệu ứng particle systems.</li><li>Các models xe cho game đua xe.</li><li>Các models cây và vật cản,…</li></ul><p>Unity cung cấp một số “standard package” miễn phí trên <a href=\"https://assetstore.unity.com/\">Asset Store</a>, bạn có thể import vào trong project đang phát triển.</p><h3 id=\"4prefab\">4. Prefab</h3><p>Prefab là một gameObject được “cache” lại nhằm tái sử dụng, thường được dùng để tạo nhiều instances của một object nào đó.</p><p>Giả sử bạn tạo một gameObject cần ghép từ 5 bộ phận, sẽ rất mất thời gian nếu mỗi lần tạo gameObject đó bạn phải ngồi ghép lại 5 bộ phận đó. Hãy biến nó thành Prefab và tạo ra nhiều bản sao.</p><p>Prefabs thường được sử dụng theo 2 cách:</p><ul><li>Thiết kế level cho game, bạn có thể tạo một cái cột đèn và biến nó thành prefab, tạo ra nhiều bản sao và đặt nó khắp mọi nơi trong map. Nếu bạn muốn đổi độ sáng của toàn bộ cột đèn, thay vì đổi từng cái một, bạn chỉ cần đổi độ sáng của “cột đèn prefab”</li><li>Cách dùng thứ 2: tạo GameObject ngay trong màn chơi, giống như Flappy Bird chẳng hạn, các cây cột màu xanh hiện ra liên tục, mỗi lần hiện như vậy tức là bạn đang “tạo bản sao” của cây cột.</li></ul><p><img src=\"https://images.viblo.asia/f88452f8-77ac-4a53-9304-6c1a3211a074.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Flappy Bird&lt;/div&gt;</p><h3 id=\"5gameobjects\">5. Game Objects</h3><p>Các Game Objects là <strong>toàn bộ</strong> các thứ trong Scene, có thể nhìn thấy hoặc không nhìn thấy.</p><p>Không chỉ các objects thực như bàn, ghế, rìu, kiếm mà còn các objects hỗ trợ như audio sources, cameras, light sources (nguồn sáng),… Các game object rỗng rất hữu dụng, đặc biệt là trong hệ thống cấp bậc parent-child (bạn có thể xem trong Hierachy tab).</p><p><img src=\"https://images.viblo.asia/676d4791-c32b-4af8-94e7-cb8515f5906a.png\" alt=\"image.png\" /></p><p>Tất cả các game objects (kể cả game objects rỗng) đều có vị trí và độ xoay trong thế giới game, nó có thể di chuyển, xoay và scale. Lưu ý rằng các yếu tố này sẽ chịu ảnh hưởng bởi cấp bậc như hình trên.</p><p>Bạn có thể tắt (disabled) hoặc bật (enabled) gameObject tùy ý, các thành phần cấu tạo nên một GameObject là <strong>Components</strong>.</p><h3 id=\"6components\">6. Components</h3><p>Như mình đã đề cập ở trên, mỗi game object đều được đinh nghĩa bởi các <strong>tập hợp các components</strong>. Tập hợp các components phải liên quan tới thuộc tính tự nhiên của object đó</p><p>Như nguồn sáng chẳng hạn, các component của nó phải định nghĩa được màu sắc, độ sáng, tương phản,… của nguồn sáng. Một camera object phải có các thuộc tính như cách tính toán phép chiếu 2D, 3D, vùng quay gần nhất, xa nhất,…</p><p>Chúng ta có thể xem một ví dụ về component:</p><ul><li>Mesh Filter và Mesh Renderer là những components định nghĩa các bề mặt của khối vật thể 3D.</li><li>Rigidbody component làm nhiệm vụ định nghĩa cách mà một object của thể di chuyển một cách “vật lý” trong Game như cân nặng, sức cản không khí, trọng lượng,…</li><li>Collider component định nghĩa một khối bao quanh GameObject để xử lý va chạm với các GameObject cũng có Collider khác trong scene.</li><li>Vị trí, độ xoay và scale của một GameObject được định nghĩa bởi component có tên là <strong>Transform</strong>.</li><li>…</li></ul><p>Bạn có thể điều chỉnh các thông số của component ở ngay trên Unity Editor, trong cửa sổ Inspector.</p><h3 id=\"7assets\">7. Assets</h3><p>Một asset là bất kỳ tài nguyên nào: âm thanh, texture (hình ảnh), model (vật thể 3D)… mà bạn cần để cấu thành một GameObject.</p><p><img src=\"https://images.viblo.asia/90dc4a3a-e5e8-4204-9427-4e2bca78ada7.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Assets&lt;/div&gt;</p><h3 id=\"8scripts\">8. Scripts</h3><p>Script là mã nguồn (code) của chúng ta, có thể để định nghĩa một hành vi nào đó cho game objects, cũng có thể định nghĩa một chức năng nào đó, có rất nhiều loại classes, phụ thuộc và hành vi mà nó điều khiển.</p><p>Tương tác trong game programming là loại event-driven, một script điển hình sẽ định nghĩa các functions dùng để phản ứng với các sự kiện trong game. Như hàm va chạm sẽ được gọi nếu 2 object va chạm với nhau, hàm tăng xu sẽ gọi nếu player nhặt được coin trong game,…</p><p>Các functions của script có thể là: di chuyển một game object, tạo/ xóa các game objects, chạy function của game objects khác… Sau đó trả lại quyền điều khiển cho hệ thống Unity Engine.</p><h2 id=\"claims\">Claims</h2><p>Bài viết được đăng vào 2021, chỉ có giá trị tham khảo các bạn nhé ;)</p><p>Bài tiếp theo: <a href=\"https://viblo.asia/p/unity-basic-25-gioi-thieu-unity-editor-m2vJPeKxLeK\">Giới thiệu Unity Editor</a></p>","title":"Unity Basic (1/5): Các khái niệm cơ bản: GameObject, Component, Scene, Prefab… trong Unity3D","tags":["Unity3d"],"created_at":1690704869000,"updated_at":1692536414000,"comments":[]}