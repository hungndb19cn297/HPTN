{"content":"<h1 id=\"mu\">Mở đầu</h1><p>Bài viết này mình sẽ liệt kê một vài câu hỏi thường xuyên được hỏi khi phỏng vấn ReactJS.</p><p>Các bạn có thể xem thêm một số câu hỏi khác tại https://viblo.asia/p/bo-cau-hoi-phong-van-intern-fresher-cho-front-end-tu-a-z-Do754rgVZM6. </p><h1 id=\"nidung\">Nội dung</h1><h2 id=\"javascript\">Javascript</h2><p><strong>1. This là gì ?</strong></p><p><strong>2. Có những loại biến nào, sự khác nhau của chúng</strong></p><p>Var, Let: có thể reassigned</p><p>Const: không thể reassigned</p><p><strong>3. Trình bày các loại scope</strong></p><p>Global: Bao gồm biến var, const, let được khai báo ở ngoài cùng file javascript.</p><p>Block code: Bao gồm biến let, const được khai báo trong block code như: if else, switch case sẽ có phạm vi block code, trường hợp var được khai báo trong block code sẽ có phạm vi global.</p><p>Local: Còn được gọi là phạm vi hàm, bao gồm let, const, var hoặc hàm được khai báo trong một hàm sẽ tạo ra phạm vi hàm</p><p><strong>4. Khái niệm Closure</strong></p><p><strong>5. Trình bày sự khác nhau giữa local stogare, cookies, session storage ?</strong></p><p><strong>6. Xử lý bất đồng bộ ( Cách hoạt động, cú pháp của Promise, Callback, Async await )</strong></p><p><strong>7. Khái niệm Hoisting</strong></p><p>Di chuyển phần khai báo biến lên đầu</p><p><strong>8. Những thay đổi ở ES6</strong></p><p><strong>9. Truthy, Falsy</strong></p><p><strong>10. Bất đồng bộ và đồng bộ trong Javascript là gì ? Javascript là ngôn ngữ lập trình đồng bộ hay bất đồng bộ ?</strong></p><p><strong>11. Tham trị, tham chiếu</strong></p><h2 id=\"reactjs\">ReactJS</h2><p><strong>1. ReactJS là gì? Tại sao sử dụng ReactJS</strong></p><p><strong>2. Trình bày life cycle của ReactJS</strong></p><p><strong>3. useEffect có thể dùng trong các giai đoạn nào của life cycle?</strong></p><p><strong>4. Virtual DOM</strong></p><p>Trong React, mỗi phần giao diện người dùng là một Component. Khi trạng thái của một Component thay đổi, React sẽ cập nhật DOM ảo. Khi DOM ảo đã được cập nhật, React sau đó sẽ so sánh phiên bản hiện tại của DOM ảo với phiên bản trước của DOM ảo. Quá trình này được gọi là \"diffing\".</p><p>Khi React biết đối tượng DOM ảo nào đã thay đổi, thì React chỉ cập nhật các đối tượng đó trong DOM thực. Điều này làm cho hiệu suất tốt hơn nhiều so với thao tác trực tiếp với DOM thực. Do đó làm cho React nổi bật như một thư viện JavaScript hiệu suất cao.</p><p><strong>5. Key là gì?</strong></p><p>Key sẽ được dùng khi sử dụng hàm <strong>map</strong> để render một danh sách, key có tác dụng giúp cho React so sánh giữa trạng thái cũ và mới của các thành phần trong danh sách để đưa ra quyết định thành phần nào được re-render.</p><p><strong>6. Trình bày một số cách để tối ưu performance</strong></p><p>Để tối ưu performance cần tránh những lần re-render không cần thiết, có một số cách để tránh re-render như sau:</p><ul><li>Khi sử dụng useEffect cần Kiểm tra chặt chẽ dependency, sử dụng eventListenner cần phải có clean up.</li><li>Sử dụng useMemo và useCallback để hạn chế khởi tạo những tác vụ phức tạp.</li><li>Sử dụng memo để hạn chế re-render không cần thiết</li><li>Sử dụng key khi render list</li><li>Sử dụng useRef để lưu value trong một vài trường hợp không cần re-render</li></ul><p><strong>7. Có thể gán trực tiếp state mà không thông qua hàm setState được không?</strong></p><p>Có thể gán trực tiếp state bằng giá trị mới, nhưng component chỉ re-render khi thay đổi state thông qua hàm setState</p><p><strong>9. Phân biệt state và props</strong></p><p>State: quản lý các trạng thái của component</p><p>Props: được dùng để chia sẽ các trạng thái của component này cho các component khác</p><p><strong>10. Khi nào component re-render</strong></p><p>Khi các state của component thay đổi</p><p>Khi component cha re-render</p><p><strong>11. Cách ngăn component re-render khi không có sự thay đổi</strong></p><p>Sử dụng memo</p><p><strong>12. Trình bày cách thức hoạt động của useEffect?</strong></p><p><strong>13. Custom hook là gì ?</strong></p><p><strong>14. Phân biệt useCallback và useMemo và memo</strong></p><p><strong>15. Có nên sử dụng useCallback và useMemo trong mọi trường hợp hay không</strong></p><p><strong>16. Tại sao cần state management</strong></p><p><strong>17. Phân biệt Context API so với Redux</strong></p><p><strong>18. Code splitting</strong></p><p>Là kĩ thuật chia nhỏ file js, giúp tăng hiệu suất tải trang bằng cách sử dụng lazy loading. Bạn có thể xem thêm tại https://react.dev/reference/react/lazy</p><p><strong>19. React là CSR hay SSR</strong></p><p><strong>20. Trình bày một số design pattern trong React</strong></p><p>Bạn có thể tham khảo một số pattern phổ biến tại https://reactpatterns.com/</p>","title":"Bộ câu hỏi phỏng vấn ReactJS từ cơ bản đến nâng cao","tags":["Interview","JavaScript","ReactJS","câu hỏi phỏng vấn"],"created_at":1690518403000,"updated_at":1692543617000,"comments":[{"id":55854,"hash_id":"Ny0VGqR8JPA","user_id":66117,"level":0,"points":1,"rated_value":0,"commentable_type":"Post","commentable_id":67859,"in_reply_to_comment":null,"in_reply_to_user":null,"created_at":"2023-07-28T11:37:09+07:00","updated_at":"2023-08-20T05:00:20+07:00","deleted_at":null,"edited_at":"2023-07-28T11:37:09+07:00","contents":"Bài viết hay quá, đúng bộ câu hỏi mình cần tks bạn 🥰","contents_short":"Bài viết hay quá, đúng bộ câu hỏi mình cần tks bạn 🥰","user":{"data":{"id":66117,"url":"https://viblo.asia/u/Tuan747","avatar":"4ac9d42b-f66e-494d-b309-63523ef40a9c.jpg","name":"Do Anh Tuan","username":"Tuan747","followers_count":1,"reputation":44,"posts_count":2,"banned_at":null,"level_partner":null}}},{"id":55855,"hash_id":"gwd4357rLX9","user_id":63772,"level":1,"points":0,"rated_value":0,"commentable_type":"Post","commentable_id":67859,"in_reply_to_comment":55854,"in_reply_to_user":"Tuan747","created_at":"2023-07-28T11:49:21+07:00","updated_at":"2023-08-20T05:00:20+07:00","deleted_at":null,"edited_at":"2023-07-28T11:49:22+07:00","contents":"thanks bạn 👋","contents_short":"thanks bạn 👋","user":{"data":{"id":63772,"url":"https://viblo.asia/u/thannguyenle","avatar":"ca0efd06-6124-4b00-8722-c9e30e3f5212.jpg","name":"Nguyen Le Than","username":"thannguyenle","followers_count":11,"reputation":530,"posts_count":5,"banned_at":null,"level_partner":null}}},{"id":55928,"hash_id":"y37Ldy1gVov","user_id":42735,"level":0,"points":1,"rated_value":0,"commentable_type":"Post","commentable_id":67859,"in_reply_to_comment":null,"in_reply_to_user":null,"created_at":"2023-08-03T12:00:15+07:00","updated_at":"2023-08-20T05:00:20+07:00","deleted_at":null,"edited_at":"2023-08-03T12:00:31+07:00","contents":"Câu 7 phần JS, cả let, const và class cũng có hoisting.\n\nCâu 19 phần React, react cung cấp cả CSR và SSR","contents_short":"Câu 7 phần JS, cả let, const và class cũng có hoisting.\n\nCâu 19 phần React, react cung cấp cả CSR và SSR","user":{"data":{"id":42735,"url":"https://viblo.asia/u/hoangnguyennn","avatar":"de29b967-f8a0-4c82-bf41-b7533380173a.jpg","name":"Hoang Nguyen","username":"hoangnguyennn","followers_count":0,"reputation":2,"posts_count":0,"banned_at":null,"level_partner":null}}},{"id":55938,"hash_id":"Yym40wY9V91","user_id":63772,"level":1,"points":0,"rated_value":0,"commentable_type":"Post","commentable_id":67859,"in_reply_to_comment":55928,"in_reply_to_user":"hoangnguyennn","created_at":"2023-08-04T10:24:03+07:00","updated_at":"2023-08-20T05:00:20+07:00","deleted_at":null,"edited_at":"2023-08-04T10:24:03+07:00","contents":"thanks bạn 👋","contents_short":"thanks bạn 👋","user":{"data":{"id":63772,"url":"https://viblo.asia/u/thannguyenle","avatar":"ca0efd06-6124-4b00-8722-c9e30e3f5212.jpg","name":"Nguyen Le Than","username":"thannguyenle","followers_count":11,"reputation":530,"posts_count":5,"banned_at":null,"level_partner":null}}}]}