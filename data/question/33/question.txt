{"content":"<p>Phuongne, Th3 26, 2020</p><h3 id=\"vsaophisdngobjectpooling\">Vì sao phải sử dụng Object Pooling?</h3><p>Trong Unity, để sinh ra một phiên bản copy của một GameObject (thường là prefab), ta sẽ sử dụng hàm Instantiate(), nếu không sử dụng bản copy đó nữa chúng ta sẽ sử dụng hàm Destroy() hay DestroyImmediate().</p><p>Hàm Instantiate() sẽ phân bổ, cấp phát tài nguyên bộ nhớ cho copied-GameObject đó, hàm Destroy() xóa bỏ các tài nguyên đã cấp phát và nếu việc này xảy ra liên tục, Garbage Collector (GC) sẽ hoạt động liên tục làm phân mảnh bộ nhớ đồng thời trong frame đó phải chờ GC xử lý xong.</p><p><img src=\"https://images.viblo.asia/ab5bd78a-dbad-482c-8cbb-28e3cbde5d84.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Memory fragmentation&lt;/div&gt;</p><p>Giả sử 10 khẩu súng có hàng trăm viên đạn như Gatling Gun bắn liên tục, các viên đạn sẽ được sinh ra và xóa đi trong memory liên tục như vậy sẽ ảnh hưởng rất lớn tới performance và đè nặng công việc cho Garbage Collector.</p><p><img src=\"https://images.viblo.asia/26820d62-074f-4c1f-aa5b-47ab76b234fd.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Gatling Gun&lt;/div&gt;</p><p>Object Pooling Pattern sinh ra nhằm giúp chúng ta tái sử dụng được các viên đạn trong ví dụ trên và giảm thiểu memory fragmentation do GC gây ra.</p><h3 id=\"objectpoolinglg\">Object Pooling là gì?</h3><p>Về ý tưởng, Object Pooling sẽ sinh ra các objects mà ta cần sử dụng trong game trước, sau đó deactive toàn bộ objects đó nếu chưa sử dụng, điều này có thể làm chậm quá trình khởi động của game.</p><p>Như vậy, thay vì Instantiate() các objects (như bullets) vào run-time, chúng ta chỉ việc lôi chúng từ Object Pool ra rồi bật active cho object đó, tương tự, thay vì Destroy(), chúng ta sẽ deactive object đó và gửi về lại Pool.</p><p>CPU xử lý active và deactive các objects tốt hơn rất nhiều so với việc sinh ra và xóa bỏ chúng trong bộ nhớ run-time, đồng thời chúng ta cũng tối ưu được cho số lượng công việc cần xử lý cho Garbage Collector (GC).</p><h3 id=\"implementobjectpoolingpattern\">Implement Object Pooling Pattern</h3><p>Để implement pattern này có rất nhiều source ở ngoài kia, ở đây mình chỉ trình bày ý tưởng của pattern.  </p><pre><code class=\"cs language-cs\">using System.Collections;<br/>using System.Collections.Generic;<br/>using UnityEngine;<br/>[System.Serializable]<br/>public class Preallocation {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public GameObject gameObject;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int count;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public bool expandable;<br/>}<br/>public class ObjectPool : MonoSingleton&amp;lt;ObjectPool&amp;gt;<br/>{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public List&amp;lt;Preallocation&amp;gt; preAllocations;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[SerializeField] List&amp;lt;GameObject&amp;gt; pooledGobjects;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected override void Awake()<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;base.Awake();<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pooledGobjects = new List&amp;lt;GameObject&amp;gt;();<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;foreach (Preallocation item in preAllocations) {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; item.count; ++i)<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pooledGobjects.Add(CreateGobject(item.gameObject));<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public GameObject Spawn(string tag) {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; pooledGobjects.Count; ++i) {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!pooledGobjects[i].activeSelf &amp;amp;&amp;amp; pooledGobjects[i].tag == tag)<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pooledGobjects[i].SetActive(true);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return pooledGobjects[i];<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; preAllocations.Count; ++i) {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (preAllocations[i].gameObject.tag == tag)<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (preAllocations[i].expandable) {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GameObject obj = CreateGobject(preAllocations[i].gameObject);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pooledGobjects.Add(obj);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj.SetActive(true);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return obj;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return null;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GameObject CreateGobject(GameObject item) {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GameObject gobject = Instantiate(item, transform);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gobject.SetActive(false);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return gobject;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>}<br/></code></pre><ul><li>Awake(): sinh ra tất cả các objects cần có cho game</li><li>Spawn(): lấy các objects bằng tag của chúng</li><li>.expandable: phát sinh thêm object nếu ban đầu cấp phát cho Pool không đủ dùng.</li></ul><h3 id=\"claims\">Claims</h3><p>Bài viết được đăng vào 2020, chỉ có giá trị tham khảo các bạn nhé ;)</p><h3 id=\"ngunthamkho\">Nguồn tham khảo</h3><ul><li><a href=\"https://sourcemaking.com/design_patterns/object_pool\">https://sourcemaking.com/design_patterns/object_pool</a></li><li><a href=\"https://unity3d.college/2017/05/11/unity3d-object-pooling/\">https://unity3d.college/2017/05/11/unity3d-object-pooling/</a></li><li><a href=\"https://gamedevelopertips.com/object-pooling-design-pattern-in-unity-c/\">https://gamedevelopertips.com/object-pooling-design-pattern-in-unity-c/</a></li></ul>","title":"Tối ưu với Object Pooling Pattern trong Unity","tags":["Unity3d"],"created_at":1690593700000,"updated_at":1692522014000,"comments":[]}