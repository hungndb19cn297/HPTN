{"content":"<p>Phuongne, Th10 22, 2020</p><hr /><h2 id=\"giithiu\">Giới thiệu</h2><p>Bài viết này giới thiệu về cách mà Unity serialize và hơi lý thuyết, tuy nhiên nó sẽ giúp các bạn tiếp cận về bản chất hơn, hiểu rõ hơn một chút về engine này.</p><p>Qua bài này các bạn có thể trả lời một số câu hỏi:</p><ul><li>Serialization là gì?</li><li>Làm cách nào Unity có thể lưu trữ các giá trị chỉnh sửa của component trên Inspector?;</li><li>Những biến như thế nào thì sẽ được unity lưu lại?</li><li>Unity lưu trữ các biến đã qua chỉnh sửa này ở đâu?</li><li>…</li></ul><h2 id=\"1serializationlg\">1. Serialization là gì?</h2><p>Theo Unity Mannual Document, “Serialization là quá trình chuyển trạng thái (dữ liệu) của một object sang một <strong>format</strong> mà unity có thể lưu trữ và cấu trúc lại”</p><p>Mình sẽ lấy ví dụ ở trên Inspector, với các biến <strong>public</strong> của component khi chỉnh sửa các giá trị của nó:</p><p><img src=\"https://images.viblo.asia/3f9d3e5b-2a15-4bda-804b-35ff3fbe5d73.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Chỉnh sửa các biến trên inspector&lt;/div&gt;</p><p>Vậy các giá trị của 2 biến <strong>Fullname</strong> và <strong>Firstname</strong> sẽ lưu ở đâu?</p><p>Được lưu trữ ở memory, database hoặc file (<strong>.unity</strong>, <strong>.prefab</strong>,…), có thể xem đoạn mã ở dưới đây</p><pre><code>&amp;nbsp;&amp;nbsp;m_Name: SchoolManager<br/>&amp;nbsp;&amp;nbsp;m_TagString: Untagged<br/>&amp;nbsp;&amp;nbsp;m_Icon: {fileID: 0}<br/>&amp;nbsp;&amp;nbsp;m_NavMeshLayer: 0<br/>&amp;nbsp;&amp;nbsp;m_StaticEditorFlags: 0<br/>&amp;nbsp;&amp;nbsp;m_IsActive: 1<br/>--- !u!114 &amp;amp;1104590625<br/>MonoBehaviour:<br/>&amp;nbsp;&amp;nbsp;m_ObjectHideFlags: 0<br/>&amp;nbsp;&amp;nbsp;m_CorrespondingSourceObject: {fileID: 0}<br/>&amp;nbsp;&amp;nbsp;m_PrefabInstance: {fileID: 0}<br/>&amp;nbsp;&amp;nbsp;m_PrefabAsset: {fileID: 0}<br/>&amp;nbsp;&amp;nbsp;m_GameObject: {fileID: 1104590624}<br/>&amp;nbsp;&amp;nbsp;m_Enabled: 1<br/>&amp;nbsp;&amp;nbsp;m_EditorHideFlags: 0<br/>&amp;nbsp;&amp;nbsp;m_Script: {fileID: 11500000, guid: fcee7be6700abe546af43a1352f39c6b, type: 3}<br/>&amp;nbsp;&amp;nbsp;m_Name:<br/>&amp;nbsp;&amp;nbsp;m_EditorClassIdentifier:<br/>&amp;nbsp;&amp;nbsp;principal:<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fullname:<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;firstName:<br/></code></pre><p>Phía trên là một đoạn mã sau khi Unity đã serialize về GameObject có tên là SchoolManager, mình lấy ra từ file MyScene.unity, được định dạng với format kiểu <a href=\"http://yaml.org/spec/1.2/spec.html\">YAML</a>, hay chính xác hơn là <a href=\"https://docs.unity3d.com/Manual/UnityYAML.html\">UnityYAML</a>.</p><p>Tuy nhiên <strong>UnityYAML</strong> không hỗ trợ đầy đủ chức năng của YAML nên có thể xem UnityYAML như là một phiên bản custom-optimized YAML library.</p><p>“các biến nằm trên inspector đều có khả năng Serialize“, tuy nhiên điều ngược lại thì ko đúng vì attribute [HideInInspector] phá vỡ điều này, mình sẽ giải thích ở mục 2.</p><p>Để đọc về attribute [HideInInspector], các bạn có thể tham khảo: [SerializeField, Header và một số attributes trong Unity3D (P1)](https://phuongne.com/serializefield-header-attributes-unity3d-p1/(opens in a new tab))</p><p>Bởi <strong>fullname</strong> và <strong>firstname</strong> mình đang để trống nên khi serialize thành UnityYAML nó cũng trống, các bạn có thể tự thay đổi, save scene lại và kiểm tra file MyScene.unity (file scene mà các bạn đang thực hành)</p><p>“Ngoài file <strong>.unity</strong> lưu tthông tin đã serialize của scene ra thì còn file nào khác không?”</p><p>Các bạn có thể xem file .prefab</p><p>&gt; “Cái này có cần học không?”</p><p>Không, như mình đã nói ở đầu, bài này giúp các bạn rõ hơn về unity.</p><h2 id=\"2ccquynhvserializationfield\">2. Các quy định về Serialization field</h2><p>Mình sẽ đưa ví dụ về serialization field trước:</p><p><strong><em>Person.cs</em></strong> – class non-monobehaviour</p><pre><code class=\"cs language-cs\">public class Person<br/>{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public string fullname;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[SerializeField] string firstName;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private string lastName;<br/>}<br/></code></pre><p><em><strong>School.cs</strong></em> – class MonoBehaviour</p><pre><code class=\"cs language-cs\">public class School : MonoBehaviour<br/>{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Person principal;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int publicCount = 1;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[HideInInspector] public int hidePublicCount = 1;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private int privateCount = 2;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[SerializeField] private int privateSerializeCount = 2;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static int staticCount = 3;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public const int constCount = 4;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public readonly int readonlyCount = 5;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Dictionary&amp;lt;string, int&amp;gt; dictionary = new Dictionary&amp;lt;string, int&amp;gt;();<br/>}<br/></code></pre><p><img src=\"https://images.viblo.asia/727510f2-1546-4def-96b1-c673c7e5cb93.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;School component trên Inspector&lt;/div&gt;</p><p>Có rất nhiều biến, tuy nhiên Unity chỉ hiện mỗi <strong>publicCount</strong> và <strong>privateSerializeCount</strong>, điều này giúp chúng ta có thể rút ra một số luật về serialization, Unity engine chỉ serialize field nếu thỏa mãn:</p><ol><li>Nó là <strong>public</strong> hoặc có gắn thuộc tính [SerializeField]</li><li>Không phải là <strong>static</strong></li><li>Không phải là <strong>const</strong></li><li>Không phải là <strong>readonly</strong></li><li>Là <strong>kiểu dữ liệu</strong> có thể mà Unity có khả năng serialize (ở ví dụ trên, Dictionary không được hỗ trợ)</li></ol><p>&gt; “Ủa sao <strong>public Person principal</strong> không xuất hiện trên Inspector?”</p><p>class Person là chúng ta tự tạo, vì vậy cần phải đánh dấu cho Unity biết nó có thể serialize bằng attribute <a href=\"https://viblo.asia/p/serializefield-header-va-mot-so-attributes-trong-unity3d-x7Z4DYKoJnX\">[Serializable]</a></p><p>Và chúng ta cũng có thể đoán được rằng: Unity sẽ chỉ lưu <strong>3</strong> giá trị của Component này dưới dạng UnityYAML, còn các biến khác thì không.</p><p>&gt; “Sao lại 3, mình thấy chỉ có <strong>2</strong> biến xuất hiện trên inspector mà?”</p><p>Như mình đã nói ở phần 1, “…attribute [HideInInspector] phá vỡ điều này”, biến <strong>hidePublicCount</strong> không xuất hiện trên inspector nhưng cũng được Unity serialize và lưu lại dưới dạng UnityYAML:</p><pre><code class=\"cs language-cs\">MonoBehaviour:<br/>&amp;nbsp;&amp;nbsp;m_ObjectHideFlags: 0<br/>&amp;nbsp;&amp;nbsp;m_CorrespondingSourceObject: {fileID: 0}<br/>&amp;nbsp;&amp;nbsp;m_PrefabInstance: {fileID: 0}<br/>&amp;nbsp;&amp;nbsp;m_PrefabAsset: {fileID: 0}<br/>&amp;nbsp;&amp;nbsp;m_GameObject: {fileID: 980147355}<br/>&amp;nbsp;&amp;nbsp;m_Enabled: 1<br/>&amp;nbsp;&amp;nbsp;m_EditorHideFlags: 0<br/>&amp;nbsp;&amp;nbsp;m_Script: {fileID: 11500000, guid: 4d41c37069812cb4dabc420a408b6178, type: 3}<br/>&amp;nbsp;&amp;nbsp;m_Name:<br/>&amp;nbsp;&amp;nbsp;m_EditorClassIdentifier:<br/>&amp;nbsp;&amp;nbsp;publicCount: 1<br/>&amp;nbsp;&amp;nbsp;hidePublicCount: 1<br/>&amp;nbsp;&amp;nbsp;privateSerializeCount: 2<br/>--- !u!4 &amp;amp;980147357<br/></code></pre><p>Đó cũng là lý do khi chúng ta tắt đi mở lại engine Unity, các giá trị này vẫn nằm trên Scene, không thay đổi.</p><p>Hoặc khi kéo thả prefab lên hierachy để tạo bản copy của prefab (prefab’s instance), Unity sẽ tạo một object <strong>hoàn toàn mới</strong>, sau đó mới đẩy các dữ liệu đã serialize của prefab vào instance đó.</p><h2 id=\"3serializationngdngtronginstantiate\">3. Serialization ứng dụng trong Instantiate()</h2><p>Phần này mình sẽ đi vào phân tích ví dụ về việc khi mình instantiate một GameObject B từ GameObject A, những giá trị nào sẽ được copy từ component của gameObject A sang component của GameObject B? </p><pre><code class=\"cs language-cs\">public class School : MonoBehaviour<br/>{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int publicCount = 1;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[HideInInspector] public int hidePublicCount = 1;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private int privateCount = 2;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[SerializeField] private int privateSerializeCount = 2;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static int staticCount = 3;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void Start()<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Debug.Log(\"----------\" + gameObject.name + \"------------\");<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Debug.Log(\"publicCount: \" + publicCount);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Debug.Log(\"hidePublicCount: \" + hidePublicCount);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Debug.Log(\"privateCount: \" + privateCount);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Debug.Log(\"privateSerializeCount: \" + privateSerializeCount);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Debug.Log(\"staticCount: \" + staticCount);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void Update()<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (Input.GetKeyDown(KeyCode.A))<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;publicCount *= 10;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;hidePublicCount *= 10;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;privateCount *= 10;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;privateSerializeCount *= 10;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;staticCount *= 10;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (Input.GetKeyDown(KeyCode.B))<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instantiate(this.gameObject);<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>}<br/></code></pre><ul><li>Khi mình nhấn <strong>A</strong>, giá trị của các biến sẽ đồng loạt x10</li><li>Khi nhấn <strong>B</strong>, sẽ tạo ra một bản copy của gameObject này</li></ul><p>Có 2 trường hợp xảy ra khi nhấn A -&gt; B, GameObject thứ 2 có giá trị các biến sẽ giống hoàn toàn GameObject sinh ra nó <strong>HOẶC</strong> chỉ có giá trị của các biến serialize mới được copy?</p><p>Đáp án chính xác là đáp án 2</p><p><img src=\"https://images.viblo.asia/6acc0a19-f57d-462d-ba56-da33974aa45e.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;LOG của ví dụ trên&lt;/div&gt;</p><p>Như mình đã nói ở cuối mục 2, chỉ biến có khả năng serialize mới được đổ vào bản copy, bao gồm <strong>publicCount</strong>, <strong>hidePublicCount</strong> và <strong>privateSerializeCount</strong>.</p><p>&gt; “Ủa sao biến <strong>static staticCount</strong> không được serialize nhưng nó vẫn thay đổi?”</p><p>Static không serialize, <strong>staticCount</strong> thay đổi bởi vì nó là biến chung của toàn bộ instance, hay là biến của class.</p><p>&gt; “Vậy các biến không serialize thì nó sẽ nhận giá trị nào?”</p><p>Nhận giá trị default trong script, nếu bạn khai báo <strong>int i = 10</strong>, hoặc <strong>Person abc;</strong> thì abc == null</p><p>Giá trị default của các biến không serializable này là không đổi, nếu bạn cố gắng thay đổi bằng cách sử dụng [ContextMenu] thì sau khi script compile, sau khi đóng mở project, sau khi load lại scene, sau khi nhấn Play trên Editor,…. giá trị này sẽ về lại giá trị default trong code, bởi Unity không lưu giá trị này ở đâu cả.</p><p>Như vậy “Chỉ có các biến serializable mới có khả năng lưu lại giá trị đã chỉnh sửa ở trên Unity Editor.”</p><h2 id=\"claims\">Claims</h2><p>Bài viết được đăng vào 2020, chỉ có giá trị tham khảo các bạn nhé ;)</p><h2 id=\"ngunthamkho\">Nguồn tham khảo</h2><p>Nguồn tham khảo:</p><p><a href=\"https://www.gamasutra.com/blogs/VivekTank/20180731/323248/Introduction_to_Unity_Serialization_and_Game_Data.php#:~:text=According%20to%20Unity%20API%20Documentation,a%20database%20or%20a%20file.%22\">Gamasutra – Introduction to Unity Serialization and Game Data</a></p><p><a href=\"https://docs.unity3d.com/Manual/script-Serialization.html\">Unity Document – Script Serialization</a></p>","title":"Script Serialization trong Unity3D là gì?","tags":["Unity3d"],"created_at":1690681633000,"updated_at":1692528783000,"comments":[]}