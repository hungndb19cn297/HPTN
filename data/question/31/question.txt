{"content":"<p>Phuongne, Th4 13, 2020</p><hr /><h2 id=\"imu\">I. Mở đầu</h2><p>Khi làm quen với Unity, chúng ta thường không đụng gì đến shader cũng như cách mà GPU render vật thể, vì vậy shader có vẻ gì đó khá là bí ẩn trong mắt của developer.</p><p>Tuy nhiên có nhiểu trường hợp đặc biệt, để có các hiệu ứng fancy hay render một vật thể theo ý muốn, chúng ta cần phải sử dụng tới shader khá là nhiều, ví dụ như tạo outline của nhân vật 2D cho Sprite Renderer, hay một số hiệu ứng dưới đây:</p><p><img src=\"https://images.viblo.asia/6a11051e-e7be-4397-b6c6-e3b687967013.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Hiệu ứng Dissolve<br/>&lt;/div&gt;</p><p><img src=\"https://images.viblo.asia/68bcd204-07ce-4dda-8c72-6a23861c72a9.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Hiệu ứng Distortion&lt;/div&gt;</p><h2 id=\"iishaderlg\">II. Shader là gì?</h2><p>Shader có thể coi là tên gọi chung của loại script được viết ra để chạy trên GPU hay can thiệp vào quá trình vẽ để tạo các vật thể, hiệu ứng đặc biệt.</p><p>Unity hỗ trợ 3 loại shader bao gồm: Surface shader, Vertex &amp; Fragment shader và Fixed Function shader, tuy nhiên Fixed Function shader đã trở nên lỗi thời khi chỉ có thể tạo các hiệu ứng đơn giản, không còn phù hợp trong thời đại game hiện nay.</p><p>Ngoài shader, chúng ta còn một thuật ngữ gọi là Shaderlab, bất kỳ sử dụng loại shader nào, scripts của chúng đều được gói ở trong shaderlab.</p><p>Shaderlab sẽ định nghĩa các thông tin cần biết của một shader như các properties nào được hiện lên inspector để điều chỉnh và debug, loại phần cứng nào sẽ sử dụng hiệu ứng này, nếu loại phần cứng này không hỗ trợ thì sẽ fallback về hiệu ứng nào (đơn giản hơn), blend mode nào được sử dụng,..</p><p><img src=\"https://images.viblo.asia/11fd29a2-3306-4d7c-9ab8-2d924f9fc291.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;ShaderLab&lt;/div&gt;</p><p>Chúng ta sẽ tìm hiểu Shaderlab syntax ở phần sau, vì vậy hiện tại chỉ cần hiểu nó định nghĩa thêm một vài thông tin về cách sử dụng shader này như thế nào.</p><h2 id=\"iiisurfaceshader\">III. Surface Shader</h2><p>Nếu bạn muốn một Material đơn giản có khả năng mô phỏng hay tương tác với ánh sáng, để nhanh gọn thì chúng ta sẽ cần tới Surface shader.</p><p>Việc tính toán màu sắc, phản xạ ánh sáng sẽ được tính toán bởi Unity và chúng ta chỉ cần điều chỉnh các properties như albedo, normals hay hệ số phản xạ,… sau đó các giá trị này sẽ được đưa vào Lighting Model mô phỏng màu sắc, ánh sáng cho từng pixel mà chúng ta không cần can thiệp.</p><p>Nhưng nếu muốn, chúng ta vẫn hoàn toàn có thể custom lại một Lighting Model, các bạn có thể xem thêm ở <a href=\"https://docs.unity3d.com/Manual/SL-SurfaceShaderLighting.html\">Custom lighting models in Surface Shaders</a></p><p>Chúng ta sẽ xem qua một ví dụ để hiểu hơn một chút cách surface shader hoạt động</p><pre><code>Shader \"Example/Diffuse Simple\" {<br/>&amp;nbsp;&amp;nbsp;SubShader {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Tags { \"RenderType\" = \"Opaque\" }<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CGPROGRAM<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#pragma surface surf Lambert<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;struct Input {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;float4 color : COLOR;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void surf (Input IN, inout SurfaceOutput o) {<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;o.Albedo = 1;<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ENDCG<br/>&amp;nbsp;&amp;nbsp;}<br/>&amp;nbsp;&amp;nbsp;Fallback \"Diffuse\"<br/>}<br/></code></pre><p><img src=\"https://images.viblo.asia/0b767100-39fc-4303-ad27-5a6a4f535846.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Kết quả của ví dụ trên&lt;/div&gt;</p><p>Hiện tại chúng ta chỉ quan tâm 2 dòng ở trong section CGPROGRAM:</p><ul><li><strong>#pragma surface surf Lambert</strong>: sử dụng Lambert lighting model, chúng ta chỉ việc gọi tên lighting model, unity sẽ tự xử lý lighting.</li><li><strong>o.Albedo = 1</strong>: vì không truyền vào texture cho input, chúng ta có thể chọn màu cho model bằng thuộc tính albedo, ở ví dụ trên sẽ là màu trắng (1 = white = rgb(1,1,1))</li></ul><h2 id=\"ivvertexampfragmentshader\">IV. Vertex &amp; Fragment Shader</h2><p>Loại shader này làm việc như gần như là cách mà GPU vẽ một vật thể vậy, không có hỗ trợ thêm lighting như surface shader, tuy nhiên điều này cũng cho ta khả năng custom cao hơn, khả năng kiểm soát cũng tốt hơn.</p><p>Theo như tên gọi của nó, loại shader này bao gồm 2 phần: vertex và fragment, trong đó phần vertex sẽ làm nhiệm vụ xử lý các đỉnh đầu vào của vật thể bằng hàm vert, sau khi đã xử lý xong, hàm cho ra output có thể là các triangles, uv,… sau đó output sẽ được rasterization (tạo điểm ảnh từ các đỉnh) thành một ma trận pixels, xem hình dưới</p><p><img src=\"https://images.viblo.asia/53052186-e338-4edb-94e1-cff5002966cd.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Tạo điểm ảnh từ các đỉnh (nguồn: NVIDIA)&lt;/div&gt;</p><p>Output sau khi đã xử lý của vert được chuyển thành phần input của hàm frag (hàm chính của phần fragment), nhiệm vụ của frag là từ các dữ liệu đầu vào tính toán màu sắc cho từng pixels của vật thể hay nói cách khác output của frag chính là màu sắc.</p><p><img src=\"https://images.viblo.asia/1fb51dde-56ca-443d-a65a-6b0dd18298d7.png\" alt=\"image.png\" />&lt;div align=\"center\"&gt;Quá trình xử lý với vertex &amp; fragment shader&lt;/div&gt;</p><p>Hay các bạn muốn biết cách GPU đưa quá trình này vào đâu có thể xem series này <a href=\"https://viblo.asia/p/gpu-ve-len-man-hinh-nhu-the-nao-GAWVpOmZL05\">Graphic cho Game dev</a></p><h2 id=\"claims\">Claims</h2><p>Bài viết được đăng vào 2020, chỉ có giá trị tham khảo các bạn nhé ;)</p><h2 id=\"ngunthamkho\">Nguồn tham khảo</h2><ul><li><a href=\"https://docs.unity3d.com/Manual/SL-SurfaceShaderExamples.html\">https://docs.unity3d.com/Manual/SL-SurfaceShaderExamples.html</a></li><li><a href=\"https://docs.unity3d.com/Manual/SL-SurfaceShaderLightingExamples.html\">https://docs.unity3d.com/Manual/SL-SurfaceShaderLightingExamples.html</a></li><li><a href=\"https://docs.unity3d.com/Manual/ShadersOverview.html\">https://docs.unity3d.com/Manual/ShadersOverview.html</a></li></ul>","title":"Cơ bản Shader trong Unity","tags":["Unity3d"],"created_at":1690595188000,"updated_at":1692525605000,"comments":[]}